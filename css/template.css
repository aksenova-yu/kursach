
<!DOCTYPE html>
<html lang='en'>
<head>
<title>Git - Запись изменений в репозиторий</title>
<meta charset='utf-8'>
<meta content='IE=edge,chrome=1' http-equiv='X-UA-Compatible'>
<link href='/favicon.png' rel='shortcut icon' type='image/png'>
<link href="/assets/git-scm-27df88bed03752bf961b2b4d7d896f10.css" media="screen" rel="stylesheet" type="text/css" />
<script src="/assets/modernizr-ed33bf57b65db2b87b251f7e92eb22bf.js" type="text/javascript"></script>
<script src="/assets/modernizr-tests-7d276fc9b3f84590beb0bba47cdd823a.js" type="text/javascript"></script>
<!--[if (gte IE 6)&(lte IE 8)]>
<script src='/javascripts/selectivizr-min.js' type='text/javascript'></script>
<![endif]-->
<script src="http://use.typekit.com/jsq2fql.js" type="text/javascript"></script>
<script>
  //<![CDATA[
    try{Typekit.load();}catch(e){}
  //]]>
</script>
<script type="text/javascript">var NREUMQ=NREUMQ||[];NREUMQ.push(["mark","firstbyte",new Date().getTime()]);</script></head>
<body id='documentation'>
<div class='inner'>
<header>
<a href="/"><img src="/images/logo@2x.png" width="110" height="46" alt="Git" /></a>
<span id='tagline'>
<em>--</em>distributed-even-if-your-workflow-isnt
</span>
<form action='/search/results' id='search'>
<input id="search-text" name="search" placeholder="Search entire site..." autocomplete="off" type="text" />
</form>
<div id='search-results'></div>
</header>

</div>
<div class='inner'>
<div id='content-wrapper'>
<aside class='sidebar'>
<nav>
<ul>
<li><a href="/about" class="">About</a></li>
<li>
<a href="/doc" class="active">Documentation</a>
<ul class='expanded'>
<li><a href="/docs" class="">Reference</a></li>
<li><a href="/book" class="active">Book</a></li>
<li><a href="/blog" class="">Blog</a></li>
<li><a href="/videos" class="">Videos</a></li>
<li><a href="/doc/ext" class="">External Links</a></li>
</ul>
</li>
<li><a href="/blog" class="">Blog</a></li>
<li>
<a href="/downloads" class="">Downloads</a>
<ul class=''>
<li><a href="/downloads/guis" class="">GUI Clients</a></li>
<li><a href="/downloads/logos" class="">Logos</a></li>
</ul>
</li>
<li><a href="/community" class="">Community</a></li>
</ul>
</nav>
<hr class='sidebar'>
  <p>Download this book in <a href="https://github.s3.amazonaws.com/media/progit.en.pdf">PDF</a>, <a href="https://github.s3.amazonaws.com/media/pro-git.en.mobi">mobi</a>, or <a href="https://github.s3.amazonaws.com/media/progit.epub">ePub</a> form for free.</p>

  <p>
This book is translated into 
  <a href="/book/de">German</a>,
  <a href="/book/zh">Chinese</a>,
  <a href="/book/fr">French</a>,
  <a href="/book/ja">Japanese</a>,
  <a href="/book/nl">Dutch</a>,
  <a href="/book/ru">Russian</a>,
  <a href="/book/ko">Korean</a>,
  <a href="/book/pt-br">Brazilian Portugese</a> and
  <a href="/book/cs">Czech</a>.
</p>
<p>
Partial translations available in
  <a href="/book/ar">Arabic</a>,
  <a href="/book/es">Spanish</a>,
  <a href="/book/id">Indonesian</a>,
  <a href="/book/it">Italian</a>,
  <a href="/book/mk">Macedonian</a>,
  <a href="/book/pl">Polish</a>,
  <a href="/book/tr">Turkish</a>,
  <a href="/book/zh-tw">Taiwanese Mandarin</a>,
  <a href="/book/es-ni">Spanish (Nicaragua)</a>,
  <a href="/book/ca">Catalan</a>,
  <a href="/book/th">Thai</a> and
  <a href="/book/fi">Finnish</a>.
</p>

<hr class="sidebar"/>

  

</aside>
<div id='content'>


<div id='book-chapters'>
  <a class="dropdown-trigger" id="book-chapters-trigger" data-panel-id="chapters-dropdown" href="#">Chapters ?</a>
<div class='dropdown-panel' id='chapters-dropdown'>
  <div class="three-column">
    <div class='column-left'>
      <ol class='book-toc'>
  <li class='chapter'>
  <h2>1. <a href="/book/ru/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5">Введение</a></h2>
    <ol>
          <li>
            1.1
            <a href="/book/ru/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9E-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9">О контроле версий</a>
          </li>
          <li>
            1.2
            <a href="/book/ru/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B0%D1%8F-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D1%8F-Git">Краткая история Git</a>
          </li>
          <li>
            1.3
            <a href="/book/ru/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git">Основы Git</a>
          </li>
          <li>
            1.4
            <a href="/book/ru/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%A3%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-Git">Установка Git</a>
          </li>
          <li>
            1.5
            <a href="/book/ru/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9F%D0%B5%D1%80%D0%B2%D0%BE%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F-%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git">Первоначальная настройка Git</a>
          </li>
          <li>
            1.6
            <a href="/book/ru/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9A%D0%B0%D0%BA-%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B8%D1%82%D1%8C-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%3F">Как получить помощь?</a>
          </li>
          <li>
            1.7
            <a href="/book/ru/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>2. <a href="/book/ru/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git">Основы Git</a></h2>
    <ol>
          <li>
            2.1
            <a href="/book/ru/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-Git-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%8F">Создание Git-репозитория</a>
          </li>
          <li>
            2.2
            <a href="/book/ru/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C-%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9-%D0%B2-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9">Запись изменений в репозиторий</a>
          </li>
          <li>
            2.3
            <a href="/book/ru/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%9F%D1%80%D0%BE%D1%81%D0%BC%D0%BE%D1%82%D1%80-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D0%B8-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D0%BE%D0%B2">Просмотр истории коммитов</a>
          </li>
          <li>
            2.4
            <a href="/book/ru/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%9E%D1%82%D0%BC%D0%B5%D0%BD%D0%B0-%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9">Отмена изменений</a>
          </li>
          <li>
            2.5
            <a href="/book/ru/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D1%83%D0%B4%D0%B0%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D1%8F%D0%BC%D0%B8">Работа с удалёнными репозиторями</a>
          </li>
          <li>
            2.6
            <a href="/book/ru/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D0%BC%D0%B5%D1%82%D0%BA%D0%B0%D0%BC%D0%B8">Работа с метками</a>
          </li>
          <li>
            2.7
            <a href="/book/ru/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%9F%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D1%8B%D0%B5-%D1%81%D0%BE%D0%B2%D0%B5%D1%82%D1%8B">Полезные советы</a>
          </li>
          <li>
            2.8
            <a href="/book/ru/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>3. <a href="/book/ru/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git">Ветвление в Git</a></h2>
    <ol>
          <li>
            3.1
            <a href="/book/ru/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%A7%D1%82%D0%BE-%D1%82%D0%B0%D0%BA%D0%BE%D0%B5-%D0%B2%D0%B5%D1%82%D0%BA%D0%B0%3F">Что такое ветка?</a>
          </li>
          <li>
            3.2
            <a href="/book/ru/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-%D0%B2%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F-%D0%B8-%D1%81%D0%BB%D0%B8%D1%8F%D0%BD%D0%B8%D1%8F">Основы ветвления и слияния</a>
          </li>
          <li>
            3.3
            <a href="/book/ru/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%A3%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%82%D0%BA%D0%B0%D0%BC%D0%B8">Управление ветками</a>
          </li>
          <li>
            3.4
            <a href="/book/ru/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%9F%D1%80%D0%B8%D1%91%D0%BC%D1%8B-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B-%D1%81-%D0%B2%D0%B5%D1%82%D0%BA%D0%B0%D0%BC%D0%B8">Приёмы работы с ветками</a>
          </li>
          <li>
            3.5
            <a href="/book/ru/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%A3%D0%B4%D0%B0%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B5-%D0%B2%D0%B5%D1%82%D0%BA%D0%B8">Удалённые ветки</a>
          </li>
          <li>
            3.6
            <a href="/book/ru/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%9F%D0%B5%D1%80%D0%B5%D0%BC%D0%B5%D1%89%D0%B5%D0%BD%D0%B8%D0%B5">Перемещение</a>
          </li>
          <li>
            3.7
            <a href="/book/ru/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
</ol>

    </div>
    <div class='column-middle'>
      <ol class='book-toc'>
  <li class='chapter'>
  <h2>4. <a href="/book/ru/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5">Git на сервере</a></h2>
    <ol>
          <li>
            4.1
            <a href="/book/ru/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-%D0%9F%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB%D1%8B">Протоколы</a>
          </li>
          <li>
            4.2
            <a href="/book/ru/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5">Настройка Git на сервере</a>
          </li>
          <li>
            4.3
            <a href="/book/ru/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BE%D1%82%D0%BA%D1%80%D1%8B%D1%82%D0%BE%D0%B3%D0%BE-SSH-%D0%BA%D0%BB%D1%8E%D1%87%D0%B0">Создание открытого SSH-ключа</a>
          </li>
          <li>
            4.4
            <a href="/book/ru/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%B0%D0%B8%D0%B2%D0%B0%D0%B5%D0%BC-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80">Настраиваем сервер</a>
          </li>
          <li>
            4.5
            <a href="/book/ru/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-%D0%9E%D1%82%D0%BA%D1%80%D1%8B%D1%82%D1%8B%D0%B9-%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF">Открытый доступ</a>
          </li>
          <li>
            4.6
            <a href="/book/ru/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-GitWeb">GitWeb</a>
          </li>
          <li>
            4.7
            <a href="/book/ru/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-Gitosis">Gitosis</a>
          </li>
          <li>
            4.8
            <a href="/book/ru/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-Gitolite">Gitolite</a>
          </li>
          <li>
            4.9
            <a href="/book/ru/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-Git-%D0%B4%D0%B5%D0%BC%D0%BE%D0%BD">Git-демон</a>
          </li>
          <li>
            4.10
            <a href="/book/ru/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-Git-%D1%85%D0%BE%D1%81%D1%82%D0%B8%D0%BD%D0%B3">Git-хостинг</a>
          </li>
          <li>
            4.11
            <a href="/book/ru/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>5. <a href="/book/ru/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B9-Git">Распределённый Git</a></h2>
    <ol>
          <li>
            5.1
            <a href="/book/ru/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B9-Git-%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B5-%D1%80%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B5-%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D1%8B">Распределённые рабочие процессы</a>
          </li>
          <li>
            5.2
            <a href="/book/ru/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B9-Git-%D0%A1%D0%BE%D0%B4%D0%B5%D0%B9%D1%81%D1%82%D0%B2%D0%B8%D0%B5-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%83">Содействие проекту</a>
          </li>
          <li>
            5.3
            <a href="/book/ru/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B9-Git-%D0%A1%D0%BE%D0%BF%D1%80%D0%BE%D0%B2%D0%BE%D0%B6%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0">Сопровождение проекта</a>
          </li>
          <li>
            5.4
            <a href="/book/ru/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B9-Git-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
          <li>
            5.5
            <a href="/book/ru/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B9-Git-Maintaining-a-Project">Maintaining a Project</a>
          </li>
          <li>
            5.6
            <a href="/book/ru/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B9-Git-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>6. <a href="/book/ru/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git">Инструменты Git</a></h2>
    <ol>
          <li>
            6.1
            <a href="/book/ru/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%92%D1%8B%D0%B1%D0%BE%D1%80-%D1%80%D0%B5%D0%B2%D0%B8%D0%B7%D0%B8%D0%B8">Выбор ревизии</a>
          </li>
          <li>
            6.2
            <a href="/book/ru/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B5-%D0%B8%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">Интерактивное индексирование</a>
          </li>
          <li>
            6.3
            <a href="/book/ru/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%9F%D1%80%D1%8F%D1%82%D0%B0%D0%BD%D1%8C%D0%B5">Прятанье</a>
          </li>
          <li>
            6.4
            <a href="/book/ru/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%9F%D0%B5%D1%80%D0%B5%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D1%8C-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D0%B8">Перезапись истории</a>
          </li>
          <li>
            6.5
            <a href="/book/ru/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%9E%D1%82%D0%BB%D0%B0%D0%B4%D0%BA%D0%B0-%D1%81-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E-Git">Отладка с помощью Git</a>
          </li>
          <li>
            6.6
            <a href="/book/ru/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%9F%D0%BE%D0%B4%D0%BC%D0%BE%D0%B4%D1%83%D0%BB%D0%B8">Подмодули</a>
          </li>
          <li>
            6.7
            <a href="/book/ru/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%A1%D0%BB%D0%B8%D1%8F%D0%BD%D0%B8%D0%B5-%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D1%8C%D0%B5%D0%B2">Слияние поддеревьев</a>
          </li>
          <li>
            6.8
            <a href="/book/ru/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
</ol>

    </div>
    <div class='column-right'>
      <ol class='book-toc'>
  <li class='chapter'>
  <h2>7. <a href="/book/ru/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git">Настройка Git</a></h2>
    <ol>
          <li>
            7.1
            <a href="/book/ru/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git-%D0%9A%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-Git">Конфигурирование Git</a>
          </li>
          <li>
            7.2
            <a href="/book/ru/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git-Git-%D0%B0%D1%82%D1%80%D0%B8%D0%B1%D1%83%D1%82%D1%8B">Git-атрибуты</a>
          </li>
          <li>
            7.3
            <a href="/book/ru/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git-%D0%9F%D0%B5%D1%80%D0%B5%D1%85%D0%B2%D0%B0%D1%82%D1%87%D0%B8%D0%BA%D0%B8-%D0%B2-Git">Перехватчики в Git</a>
          </li>
          <li>
            7.4
            <a href="/book/ru/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git-%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%BD%D0%B0%D0%B2%D1%8F%D0%B7%D1%8B%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D0%BF%D0%BE%D0%BB%D0%B8%D1%82%D0%B8%D0%BA%D0%B8-%D1%81-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E-Git">Пример навязывания политики с помощью Git</a>
          </li>
          <li>
            7.5
            <a href="/book/ru/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>8. <a href="/book/ru/Git-%D0%B8-%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%B5-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9">Git и другие системы контроля версий</a></h2>
    <ol>
          <li>
            8.1
            <a href="/book/ru/Git-%D0%B8-%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%B5-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9-Git-%D0%B8-Subversion">Git и Subversion</a>
          </li>
          <li>
            8.2
            <a href="/book/ru/Git-%D0%B8-%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%B5-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9-%D0%9C%D0%B8%D0%B3%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%BD%D0%B0-Git">Миграция на Git</a>
          </li>
          <li>
            8.3
            <a href="/book/ru/Git-%D0%B8-%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%B5-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
  <li class='chapter'>
  <h2>9. <a href="/book/ru/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8">Git изнутри</a></h2>
    <ol>
          <li>
            9.1
            <a href="/book/ru/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-%D0%A1%D0%B0%D0%BD%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D0%BA%D0%B0-%D0%B8-%D1%84%D0%B0%D1%80%D1%84%D0%BE%D1%80">Сантехника и фарфор</a>
          </li>
          <li>
            9.2
            <a href="/book/ru/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D1%8B-%D0%B2-Git">Объекты в Git</a>
          </li>
          <li>
            9.3
            <a href="/book/ru/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-%D0%A1%D1%81%D1%8B%D0%BB%D0%BA%D0%B8-%D0%B2-Git">Ссылки в Git</a>
          </li>
          <li>
            9.4
            <a href="/book/ru/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-Pack-%D1%84%D0%B0%D0%B9%D0%BB%D1%8B">Pack-файлы</a>
          </li>
          <li>
            9.5
            <a href="/book/ru/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-%D0%A1%D0%BF%D0%B5%D1%86%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D0%B8-%D1%81%D1%81%D1%8B%D0%BB%D0%BE%D0%BA">Спецификации ссылок</a>
          </li>
          <li>
            9.6
            <a href="/book/ru/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-%D0%9F%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB%D1%8B-%D0%BF%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B8">Протоколы передачи</a>
          </li>
          <li>
            9.7
            <a href="/book/ru/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-%D0%9E%D0%B1%D1%81%D0%BB%D1%83%D0%B6%D0%B8%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D1%81%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85">Обслуживание и восстановление данных</a>
          </li>
          <li>
            9.8
            <a href="/book/ru/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
</ol>

      <ol class="book-toc">
        <li class='chapter'>
          <h2><a href="/book/commands">Index of Commands</a></h2>
        </li>
      </ol>
    </div>
  </div>
 </div>

</div>

<div id='main' class="book">
    <h1>2.2 Основы Git - Запись изменений в репозиторий</h1>
  <div><h2>Запись изменений в репозиторий</h2>

<p>Итак, у вас имеется настоящий Git-репозиторий и рабочая копия файлов для некоторого проекта. Вам нужно делать некоторые изменения и фиксировать “снимки” состояния (snapshots) этих изменений в вашем репозитории каждый раз, когда проект достигает состояния, которое вам хотелось бы сохранить.</p>

<p>Запомните, каждый файл в вашем рабочем каталоге может находиться в одном из двух состояний: под версионным контролем (отслеживаемые) и нет (неотслеживаемые). Отслеживаемые файлы — это те файлы, которые были в последнем слепке состояния проекта (snapshot); они могут быть неизменёнными, изменёнными или подготовленными к коммиту (staged). Неотслеживаемые файлы — это всё остальное, любые файлы в вашем рабочем каталоге, которые не входили в ваш последний слепок состояния и не подготовлены к коммиту. Когда вы впервые клонируете репозиторий, все файлы будут отслеживаемыми и неизменёнными, потому что вы только взяли их из хранилища (checked them out) и ничего пока не редактировали.</p>

<p>Как только вы отредактируете файлы, Git будет рассматривать их как изменённые, т.к. вы изменили их с момента последнего коммита. Вы индексируете (stage) эти изменения и затем фиксируете все индексированные изменения, а затем цикл повторяется. Этот жизненный цикл изображён на рисунке 2-1.</p>

<p><center><img src="/figures/18333fig0201-tn.png"></center><br/>
Рисунок 2-1. Жизненный цикл состояний файлов.</p>

<h3 id="Определение-состояния-файлов"><a href="#Определение-состояния-файлов">Определение состояния файлов</a></h3>

<p>Основной инструмент, используемый для определения, какие файлы в каком состоянии находятся — это команда <code>git status</code>. Если вы выполните эту команду сразу после клонирования, вы увидите что-то вроде этого:</p>

<pre><code>$ git status&#x000A;# On branch master&#x000A;nothing to commit (working directory clean)&#x000A;</code></pre>

<p>Это означает, что у вас чистый рабочий каталог, другими словами — в нём нет отслеживаемых изменённых файлов. Git также не обнаружил неотслеживаемых файлов, в противном случае они бы были перечислены здесь. И наконец, команда сообщает вам на какой ветке (branch) вы сейчас находитесь. Пока что это всегда ветка <code>master</code> — это ветка по умолчанию; в этой главе это не важно. В следующей главе будет подробно рассказано про ветки и ссылки.</p>

<p>Предположим, вы добавили в свой проект новый файл, простой файл README. Если этого файла раньше не было, и вы выполните <code>git status</code>, вы увидите свой неотслеживаемый файл вот так:</p>

<pre><code>$ vim README&#x000A;$ git status&#x000A;# On branch master&#x000A;# Untracked files:&#x000A;#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)&#x000A;#&#x000A;#   README&#x000A;nothing added to commit but untracked files present (use &quot;git add&quot; to track)&#x000A;</code></pre>

<p>Понять, что новый файл README неотслеживаемый можно по тому, что он находится в секции &quot;Untracked files&quot; в выводе команды <code>status</code>. Статус &quot;неотслеживаемый файл&quot;, по сути, означает, что Git видит файл, отсутствующий в предыдущем снимке состояния (коммите); Git не станет добавлять его в ваши коммиты, пока вы его явно об этом не попросите. Это предохранит вас от случайного добавления в репозиторий сгенерированных бинарных файлов или каких-либо других, которые вы и не думали добавлять. Мы хотели добавить README, так давайте сделаем это.</p>

<h3 id="Отслеживание-новых-файлов"><a href="#Отслеживание-новых-файлов">Отслеживание новых файлов</a></h3>

<p>Для того чтобы начать отслеживать (добавить под версионный контроль) новый файл, используется команда <code>git add</code>. Чтобы начать отслеживание файла README, вы можете выполнить следующее:</p>

<pre><code>$ git add README&#x000A;</code></pre>

<p>Если вы снова выполните команду <code>status</code>, то увидите, что файл README теперь отслеживаемый и индексированный:</p>

<pre><code>$ git status&#x000A;# On branch master&#x000A;# Changes to be committed:&#x000A;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#x000A;#&#x000A;#   new file:   README&#x000A;#&#x000A;</code></pre>

<p>Вы можете видеть, что файл проиндексирован по тому, что он находится в секции “Changes to be committed”. Если вы выполните коммит в этот момент, то версия файла, существовавшая на момент выполнения вами команды <code>git add</code>, будет добавлена в историю снимков состояния. Как вы помните, когда вы ранее выполнили <code>git init</code>, вы затем выполнили <code>git add (файлы)</code> — это было сделано для того, чтобы добавить файлы в вашем каталоге под версионный контроль. Команда <code>git add</code> принимает параметром путь к файлу или каталогу, если это каталог, команда рекурсивно добавляет (индексирует) все файлы в данном каталоге.</p>

<h3 id="Индексация-изменённых-файлов"><a href="#Индексация-изменённых-файлов">Индексация изменённых файлов</a></h3>

<p>Давайте модифицируем файл, уже находящийся под версионным контролем. Если вы измените отслеживаемый файл benchmarks.rb и после этого снова выполните команду <code>status</code>, то результат будет примерно следующим:</p>

<pre><code>$ git status&#x000A;# On branch master&#x000A;# Changes to be committed:&#x000A;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#x000A;#&#x000A;#   new file:   README&#x000A;#&#x000A;# Changes not staged for commit:&#x000A;#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)&#x000A;#&#x000A;#   modified:   benchmarks.rb&#x000A;#&#x000A;</code></pre>

<p>Файл benchmarks.rb находится в секции “Changes not staged for commit” — это означает, что отслеживаемый файл был изменён в рабочем каталоге, но пока не проиндексирован. Чтобы проиндексировать его, необходимо выполнить команду <code>git add</code> (это многофункциональная команда, она используется для добавления под версионный контроль новых файлов, для индексации изменений, а также для других целей, например для указания файлов с исправленным конфликтом слияния). Выполним <code>git add</code>, чтобы проиндексировать benchmarks.rb, а затем снова выполним <code>git status</code>:</p>

<pre><code>$ git add benchmarks.rb&#x000A;$ git status&#x000A;# On branch master&#x000A;# Changes to be committed:&#x000A;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#x000A;#&#x000A;#   new file:   README&#x000A;#   modified:   benchmarks.rb&#x000A;#&#x000A;</code></pre>

<p>Теперь оба файла проиндексированы и войдут в следующий коммит. В этот момент вы, предположим, вспомнили одно небольшое изменение, которое вы хотите сделать в benchmarks.rb до фиксации. Вы открываете файл, вносите и сохраняете необходимые изменения и вроде бы готовы к коммиту. Но давайте-ка ещё раз выполним <code>git status</code>:</p>

<pre><code>$ vim benchmarks.rb&#x000A;$ git status&#x000A;# On branch master&#x000A;# Changes to be committed:&#x000A;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#x000A;#&#x000A;#   new file:   README&#x000A;#   modified:   benchmarks.rb&#x000A;#&#x000A;# Changes not staged for commit:&#x000A;#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)&#x000A;#&#x000A;#   modified:   benchmarks.rb&#x000A;#&#x000A;</code></pre>

<p>Что за чёрт? Теперь benchmarks.rb отображается как проиндексированный и непроиндексированный одновременно. Как такое возможно? Такая ситуация наглядно демонстрирует, что Git индексирует файл в точности в том состоянии, в котором он находился, когда вы выполнили команду <code>git add</code>. Если вы выполните коммит сейчас, то файл benchmarks.rb попадёт в коммит в том состоянии, в котором он находился, когда вы последний раз выполняли команду <code>git add</code>, а не в том, в котором он находится в вашем рабочем каталоге в момент выполнения <code>git commit</code>. Если вы изменили файл после выполнения <code>git add</code>, вам придётся снова выполнить <code>git add</code>, чтобы проиндексировать последнюю версию файла:</p>

<pre><code>$ git add benchmarks.rb&#x000A;$ git status&#x000A;# On branch master&#x000A;# Changes to be committed:&#x000A;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#x000A;#&#x000A;#   new file:   README&#x000A;#   modified:   benchmarks.rb&#x000A;#&#x000A;</code></pre>

<h3 id="Игнорирование-файлов"><a href="#Игнорирование-файлов">Игнорирование файлов</a></h3>

<p>Зачастую, у вас имеется группа файлов, которые вы не только не хотите автоматически добавлять в репозиторий, но и видеть в списках неотслеживаемых. К таким файлам обычно относятся автоматически генерируемые файлы (различные логи, результаты сборки программ и т.п.). В таком случае, вы можете создать файл .gitignore с перечислением шаблонов соответствующих таким файлам. Вот пример файла .gitignore:</p>

<pre><code>$ cat .gitignore&#x000A;*.[oa]&#x000A;*~&#x000A;</code></pre>

<p>Первая строка предписывает Git&#39;у игнорировать любые файлы заканчивающиеся на .o или .a — объектные и архивные файлы, которые могут появиться во время сборки кода. Вторая строка предписывает игнорировать все файлы заканчивающиеся на тильду (<code>~</code>), которая используется во многих текстовых редакторах, например Emacs, для обозначения временных файлов. Вы можете также включить каталоги log, tmp или pid; автоматически создаваемую документацию; и т.д. и т.п. Хорошая практика заключается в настройке файла .gitignore до того, как начать серьёзно работать, это защитит вас от случайного добавления в репозиторий файлов, которых вы там видеть не хотите.</p>

<p>К шаблонам в файле .gitignore применяются следующие правила:</p>

<ul>
<li>  Пустые строки, а также строки, начинающиеся с #, игнорируются.</li>
<li>  Можно использовать стандартные glob шаблоны.</li>
<li>  Можно заканчивать шаблон символом слэша (<code>/</code>) для указания каталога.</li>
<li>  Можно инвертировать шаблон, использовав восклицательный знак (<code>!</code>) в качестве первого символа.</li>
</ul>

<p>Glob-шаблоны представляют собой упрощённые регулярные выражения используемые командными интерпретаторами. Символ <code>*</code> соответствует 0 или более символам; последовательность <code>[abc]</code> — любому символу из указанных в скобках (в данном примере a, b или c); знак вопроса (<code>?</code>) соответствует одному символу; <code>[0-9]</code> соответствует любому символу из интервала (в данном случае от 0 до 9).</p>

<p>Вот ещё один пример файла .gitignore:</p>

<pre><code># комментарий — эта строка игнорируется&#x000A;# не обрабатывать файлы, имя которых заканчивается на .a&#x000A;*.a&#x000A;# НО отслеживать файл lib.a, несмотря на то, что мы игнорируем все .a файлы с помощью предыдущего правила&#x000A;!lib.a&#x000A;# игнорировать только файл TODO находящийся в корневом каталоге, не относится к файлам вида subdir/TODO&#x000A;/TODO&#x000A;# игнорировать все файлы в каталоге build/&#x000A;build/&#x000A;# игнорировать doc/notes.txt, но не doc/server/arch.txt&#x000A;doc/*.txt&#x000A;# игнорировать все .txt файлы в каталоге doc/&#x000A;doc/**/*.txt&#x000A;</code></pre>

<p>Шаблон <code>**/</code> доступен в Git, начиная с версии 1.8.2.</p>

<h3 id="Просмотр-индексированных-и-неиндексированных-изменений"><a href="#Просмотр-индексированных-и-неиндексированных-изменений">Просмотр индексированных и неиндексированных изменений</a></h3>

<p>Если результат работы команды <code>git status</code> недостаточно информативен для вас — вам хочется знать, что конкретно поменялось, а не только какие файлы были изменены — вы можете использовать команду <code>git diff</code>. Позже мы рассмотрим команду <code>git diff</code> подробнее; вы, скорее всего, будете использовать эту команду для получения ответов на два вопроса: что вы изменили, но ещё не проиндексировали, и что вы проиндексировали и собираетесь фиксировать. Если <code>git status</code> отвечает на эти вопросы слишком обобщённо, то <code>git diff</code> показывает вам непосредственно добавленные и удалённые строки — собственно заплатку (patch).</p>

<p>Допустим, вы снова изменили и проиндексировали файл README, а затем изменили файл benchmarks.rb без индексирования. Если вы выполните команду <code>status</code>, вы опять увидите что-то вроде:</p>

<pre><code>$ git status&#x000A;# On branch master&#x000A;# Changes to be committed:&#x000A;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#x000A;#&#x000A;#   new file:   README&#x000A;#&#x000A;# Changes not staged for commit:&#x000A;#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)&#x000A;#&#x000A;#   modified:   benchmarks.rb&#x000A;#&#x000A;</code></pre>

<p>Чтобы увидеть, что же вы изменили, но пока не проиндексировали, наберите <code>git diff</code> без аргументов:</p>

<pre><code>$ git diff&#x000A;diff --git a/benchmarks.rb b/benchmarks.rb&#x000A;index 3cb747f..da65585 100644&#x000A;--- a/benchmarks.rb&#x000A;+++ b/benchmarks.rb&#x000A;@@ -36,6 +36,10 @@ def main&#x000A;           @commit.parents[0].parents[0].parents[0]&#x000A;         end&#x000A;&#x000A;+        run_code(x, &#39;commits 1&#39;) do&#x000A;+          git.commits.size&#x000A;+        end&#x000A;+&#x000A;         run_code(x, &#39;commits 2&#39;) do&#x000A;           log = git.commits(&#39;master&#39;, 15)&#x000A;           log.size&#x000A;</code></pre>

<p>Эта команда сравнивает содержимое вашего рабочего каталога с содержимым индекса. Результат показывает ещё не проиндексированные изменения.</p>

<p>Если вы хотите посмотреть, что вы проиндексировали и что войдёт в следующий коммит, вы можете выполнить <code>git diff --cached</code>. (В Git&#39;е версии 1.6.1 и выше, вы также можете использовать <code>git diff --staged</code>, которая легче запоминается.) Эта команда сравнивает ваши индексированные изменения с последним коммитом:</p>

<pre><code>$ git diff --cached&#x000A;diff --git a/README b/README&#x000A;new file mode 100644&#x000A;index 0000000..03902a1&#x000A;--- /dev/null&#x000A;+++ b/README2&#x000A;@@ -0,0 +1,5 @@&#x000A;+grit&#x000A;+ by Tom Preston-Werner, Chris Wanstrath&#x000A;+ http://github.com/mojombo/grit&#x000A;+&#x000A;+Grit is a Ruby library for extracting information from a Git repository&#x000A;</code></pre>

<p>Важно отметить, что <code>git diff</code> сама по себе не показывает все изменения сделанные с последнего коммита — только те, что ещё не проиндексированы. Такое поведение может сбивать с толку, так как если вы проиндексируете все свои изменения, то <code>git diff</code> ничего не вернёт.</p>

<p>Другой пример: вы проиндексировали файл benchmarks.rb и затем изменили его, вы можете использовать <code>git diff</code> для просмотра как индексированных изменений в этом файле, так и тех, что пока не проиндексированы:</p>

<pre><code>$ git add benchmarks.rb&#x000A;$ echo &#39;# test line&#39; &gt;&gt; benchmarks.rb&#x000A;$ git status&#x000A;# On branch master&#x000A;#&#x000A;# Changes to be committed:&#x000A;#&#x000A;#   modified:   benchmarks.rb&#x000A;#&#x000A;# Changes not staged for commit:&#x000A;#&#x000A;#   modified:   benchmarks.rb&#x000A;#&#x000A;</code></pre>

<p>Теперь вы можете используя <code>git diff</code> посмотреть непроиндексированные изменения</p>

<pre><code>$ git diff&#x000A;diff --git a/benchmarks.rb b/benchmarks.rb&#x000A;index e445e28..86b2f7c 100644&#x000A;--- a/benchmarks.rb&#x000A;+++ b/benchmarks.rb&#x000A;@@ -127,3 +127,4 @@ end&#x000A; main()&#x000A;&#x000A; ##pp Grit::GitRuby.cache_client.stats&#x000A;+# test line&#x000A;</code></pre>

<p>а также уже проиндексированные, используя <code>git diff --cached</code>:</p>

<pre><code>$ git diff --cached&#x000A;diff --git a/benchmarks.rb b/benchmarks.rb&#x000A;index 3cb747f..e445e28 100644&#x000A;--- a/benchmarks.rb&#x000A;+++ b/benchmarks.rb&#x000A;@@ -36,6 +36,10 @@ def main&#x000A;          @commit.parents[0].parents[0].parents[0]&#x000A;        end&#x000A;&#x000A;+        run_code(x, &#39;commits 1&#39;) do&#x000A;+          git.commits.size&#x000A;+        end&#x000A;+       &#x000A;        run_code(x, &#39;commits 2&#39;) do&#x000A;          log = git.commits(&#39;master&#39;, 15)&#x000A;          log.size&#x000A;</code></pre>

<h3 id="Фиксация-изменений"><a href="#Фиксация-изменений">Фиксация изменений</a></h3>

<p>Теперь, когда ваш индекс настроен так, как вам и хотелось, вы можете зафиксировать свои изменения. Запомните, всё, что до сих пор не проиндексировано — любые файлы, созданные или изменённые вами, и для которых вы не выполнили <code>git add</code> после момента редактирования — не войдут в этот коммит. Они останутся изменёнными файлами на вашем диске.
В нашем случае, когда вы в последний раз выполняли <code>git status</code>, вы видели что всё проиндексировано, и вот, вы готовы к коммиту. Простейший способ зафиксировать изменения — это набрать <code>git commit</code>:</p>

<pre><code>$ git commit&#x000A;</code></pre>

<p>Эта команда откроет выбранный вами текстовый редактор. (Редактор устанавливается системной переменной <code>$EDITOR</code> — обычно это vim или emacs, хотя вы можете установить ваш любимый с помощью команды <code>git config --global core.editor</code>, как было показано в главе 1).</p>

<p>В редакторе будет отображён следующий текст (это пример окна Vim&#39;а):</p>

<pre><code># Please enter the commit message for your changes. Lines starting&#x000A;# with &#39;#&#39; will be ignored, and an empty message aborts the commit.&#x000A;# On branch master&#x000A;# Changes to be committed:&#x000A;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#x000A;#&#x000A;#       new file:   README&#x000A;#       modified:   benchmarks.rb&#x000A;~&#x000A;~&#x000A;~&#x000A;&quot;.git/COMMIT_EDITMSG&quot; 10L, 283C&#x000A;</code></pre>

<p>Вы можете видеть, что комментарий по умолчанию для коммита содержит закомментированный результат работы (&quot;выхлоп&quot;) команды <code>git status</code> и ещё одну пустую строку сверху. Вы можете удалить эти комментарии и набрать своё сообщение или же оставить их для напоминания о том, что вы фиксируете. (Для ещё более подробного напоминания, что же именно вы поменяли, можете передать аргумент <code>-v</code> в команду <code>git commit</code>. Это приведёт к тому, что в комментарий будет также помещена дельта/diff изменений, таким образом вы сможете точно увидеть всё, что сделано.) Когда вы выходите из редактора, Git создаёт для вас коммит с этим сообщением (удаляя комментарии и вывод diff&#39;а).</p>

<p>Есть и другой способ — вы можете набрать свой комментарий к коммиту в командной строке вместе с командой <code>commit</code>, указав его после параметра -m, как в следующем примере:</p>

<pre><code>$ git commit -m &quot;Story 182: Fix benchmarks for speed&quot;&#x000A;[master]: created 463dc4f: &quot;Fix benchmarks for speed&quot;&#x000A; 2 files changed, 3 insertions(+), 0 deletions(-)&#x000A; create mode 100644 README&#x000A;</code></pre>

<p>Итак, вы создали свой первый коммит! Вы можете видеть, что коммит вывел вам немного информации о себе: на какую ветку вы выполнили коммит (master), какая контрольная сумма SHA-1 у этого коммита (<code>463dc4f</code>), сколько файлов было изменено, а также статистику по добавленным/удалённым строкам в этом коммите.</p>

<p>Запомните, что коммит сохраняет снимок состояния вашего индекса. Всё, что вы не проиндексировали, так и торчит в рабочем каталоге как изменённое; вы можете сделать ещё один коммит, чтобы добавить эти изменения в репозиторий. Каждый раз, когда вы делаете коммит, вы сохраняете снимок состояния вашего проекта, который позже вы можете восстановить или с которым можно сравнить текущее состояние.</p>

<h3 id="Игнорирование-индексации"><a href="#Игнорирование-индексации">Игнорирование индексации</a></h3>

<p>Несмотря на то, что индекс может быть удивительно полезным для создания коммитов именно такими, как вам и хотелось, он временами несколько сложнее, чем вам нужно в процессе работы. Если у вас есть желание пропустить этап индексирования, Git предоставляет простой способ. Добавление параметра <code>-a</code> в команду <code>git commit</code> заставляет Git автоматически индексировать каждый уже отслеживаемый на момент коммита файл, позволяя вам обойтись без <code>git add</code>:</p>

<pre><code>$ git status&#x000A;# On branch master&#x000A;#&#x000A;# Changes not staged for commit:&#x000A;#&#x000A;#   modified:   benchmarks.rb&#x000A;#&#x000A;$ git commit -a -m &#39;added new benchmarks&#39;&#x000A;[master 83e38c7] added new benchmarks&#x000A; 1 files changed, 5 insertions(+), 0 deletions(-)&#x000A;</code></pre>

<p>Обратите внимание на то, что в данном случае перед коммитом вам не нужно выполнять <code>git add</code> для файла benchmarks.rb.</p>

<h3 id="Удаление-файлов"><a href="#Удаление-файлов">Удаление файлов</a></h3>

<p>Для того чтобы удалить файл из Git&#39;а, вам необходимо удалить его из отслеживаемых файлов (точнее, удалить его из вашего индекса) а затем выполнить коммит. Это позволяет сделать команда <code>git rm</code>, которая также удаляет файл из вашего рабочего каталога, так что вы в следующий раз не увидите его как “неотслеживаемый”.</p>

<p>Если вы просто удалите файл из своего рабочего каталога, он будет показан в секции “Changes not staged for commit” (“Изменённые но не обновлённые” — читай не проиндексированные) вывода команды <code>git status</code>:</p>

<pre><code>$ rm grit.gemspec&#x000A;$ git status&#x000A;# On branch master&#x000A;#&#x000A;# Changes not staged for commit:&#x000A;#   (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)&#x000A;#&#x000A;#       deleted:    grit.gemspec&#x000A;#&#x000A;</code></pre>

<p>Затем, если вы выполните команду <code>git rm</code>, удаление файла попадёт в индекс:</p>

<pre><code>$ git rm grit.gemspec&#x000A;rm &#39;grit.gemspec&#39;&#x000A;$ git status&#x000A;# On branch master&#x000A;#&#x000A;# Changes to be committed:&#x000A;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#x000A;#&#x000A;#       deleted:    grit.gemspec&#x000A;#&#x000A;</code></pre>

<p>После следующего коммита файл исчезнет и больше не будет отслеживаться. Если вы изменили файл и уже проиндексировали его, вы должны использовать принудительное удаление с помощью параметра <code>-f</code>. Это сделано для повышения безопасности, чтобы предотвратить ошибочное удаление данных, которые ещё не были записаны в снимок состояния и которые нельзя восстановить из Git&#39;а.</p>

<p>Другая полезная штука, которую вы можете захотеть сделать — это удалить файл из индекса, оставив его при этом в рабочем каталоге. Другими словами, вы можете захотеть оставить файл на винчестере, и убрать его из-под бдительного ока Git&#39;а. Это особенно полезно, если вы забыли добавить что-то в файл <code>.gitignore</code> и по ошибке проиндексировали, например, большой файл с логами, или кучу промежуточных файлов компиляции. Чтобы сделать это, используйте опцию <code>--cached</code>:</p>

<pre><code>$ git rm --cached readme.txt&#x000A;</code></pre>

<p>В команду <code>git rm</code> можно передавать файлы, каталоги или glob-шаблоны. Это означает, что вы можете вытворять что-то вроде:</p>

<pre><code>$ git rm log/\*.log&#x000A;</code></pre>

<p>Обратите внимание на обратный слэш (<code>\</code>) перед <code>*</code>. Он необходим из-за того, что Git использует свой собственный обработчик имён файлов вдобавок к обработчику вашего командного интерпретатора. Эта команда удаляет все файлы, которые имеют расширение <code>.log</code> в каталоге <code>log/</code>. Или же вы можете сделать вот так:</p>

<pre><code>$ git rm \*~&#x000A;</code></pre>

<p>Эта команда удаляет все файлы, чьи имена заканчиваются на <code>~</code>.</p>

<h3 id="Перемещение-файлов"><a href="#Перемещение-файлов">Перемещение файлов</a></h3>

<p>В отличие от многих других систем версионного контроля, Git не отслеживает перемещение файлов явно. Когда вы переименовываете файл в Git&#39;е, в нём не сохраняется никаких метаданных, говорящих о том, что файл был переименован. Однако, Git довольно умён в плане обнаружения перемещений постфактум — мы рассмотрим обнаружение перемещения файлов чуть позже.</p>

<p>Таким образом, наличие в Git&#39;е команды <code>mv</code> выглядит несколько странным. Если вам хочется переименовать файл в Git&#39;е, вы можете сделать что-то вроде:</p>

<pre><code>$ git mv file_from file_to&#x000A;</code></pre>

<p>и это отлично сработает. На самом деле, если вы выполните что-то вроде этого и посмотрите на статус, вы увидите, что Git считает, что произошло переименование файла:</p>

<pre><code>$ git mv README.txt README&#x000A;$ git status&#x000A;# On branch master&#x000A;# Your branch is ahead of &#39;origin/master&#39; by 1 commit.&#x000A;#&#x000A;# Changes to be committed:&#x000A;#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)&#x000A;#&#x000A;#       renamed:    README.txt -&gt; README&#x000A;#&#x000A;</code></pre>

<p>Однако, это эквивалентно выполнению следующих команд:</p>

<pre><code>$ mv README.txt README&#x000A;$ git rm README.txt&#x000A;$ git add README&#x000A;</code></pre>

<p>Git неявно определяет, что произошло переименование, поэтому неважно, переименуете вы файл так или используя команду <code>mv</code>. Единственное отличие состоит лишь в том, что <code>mv</code> — это одна команда вместо трёх — это функция для удобства. Важнее другое — вы можете использовать любой удобный способ, чтобы переименовать файл, и затем воспользоваться add/rm перед коммитом.</p>

<div id="nav"><a href="/book/ru/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-Git-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%8F">prev</a> | <a href="/book/ru/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%9F%D1%80%D0%BE%D1%81%D0%BC%D0%BE%D1%82%D1%80-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D0%B8-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D0%BE%D0%B2">next</a></div></div>
</div>

</div>
</div>
<footer>
<div class='site-source'>
This <a href="https://github.com/github/gitscm-next/blob/master/README.md#license">open sourced</a> site is <a href="https://github.com/github/gitscm-next">hosted on GitHub.</a><br>
Patches, suggestions, and comments are welcome.
</div>
<div class='sfc-member'>
Git is a member of <a href="/sfc">Software Freedom Conservancy</a>
</div>
</footer>
<script src="/assets/jquery-1.7.1.min-8995aa22fa589eacd71ee464eae9f9cc.js" type="text/javascript"></script>
<script src="/assets/jquery-ui-1.8.18.custom.min-b258993d5959146bc9695f9448caa100.js" type="text/javascript"></script>
<script src="/assets/jquery.defaultvalue-a940d9c1e0e4d571bb2d6659cfc22c32.js" type="text/javascript"></script>
<script src="/assets/session.min-73f8dc381c79bc40b3ba3bd0fa561541.js" type="text/javascript"></script>
<script src="/assets/site-4c5284105c7e9fbef4b7b2dedb73c839.js" type="text/javascript"></script>

</div>
<script type="text/javascript">if (!NREUMQ.f) { NREUMQ.f=function() {
NREUMQ.push(["load",new Date().getTime()]);
var e=document.createElement("script");
e.type="text/javascript";
e.src=(("http:"===document.location.protocol)?"http:":"https:") + "//" +
  "d1ros97qkrwjf5.cloudfront.net/42/eum/rum.js";
document.body.appendChild(e);
if(NREUMQ.a)NREUMQ.a();
};
NREUMQ.a=window.onload;window.onload=NREUMQ.f;
};
NREUMQ.push(["nrfj","beacon-1.newrelic.com","20c4a8c482",454369,"dl5cQkcLXF9XRBoHW1paQRlGAVNHW1lb",0,184,new Date().getTime(),"","","","",""]);</script></body>
</html>
